# Generated by Django 4.2 on 2023-06-08 10:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app', '0000_premigrations'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('classification', models.CharField(choices=[('tosi', 'TOSI'), ('tori', 'TORI'), ('infra', 'Infra')], default='tosi', max_length=140, verbose_name='classification')),
                ('application_status', models.CharField(choices=[('in_deployment', 'In Deployment'), ('in_use', 'In Use'), ('unused', 'Unused'), ('shutdown', 'Shutdown'), ('archived', 'Archived'), ('undefined', 'Waiting for Definition'), ('unreleased', 'Waiting for Release'), ('deleted', 'Deleted')], default='undefined', max_length=140, verbose_name='application status')),
                ('person_register', models.BooleanField(verbose_name='includes personal info register')),
                ('personal_info_logging', models.BooleanField(verbose_name='personal info logging')),
                ('install_info', models.CharField(max_length=500, verbose_name='additional installation info')),
                ('update_practice', models.CharField(max_length=140, verbose_name='update practices')),
                ('security_practice_monitoring', models.CharField(max_length=140, verbose_name='security practices and monitoring')),
                ('recovery_practices_convalescence', models.CharField(max_length=140, verbose_name='recovery practices and convalescence')),
                ('log_archives', models.CharField(max_length=140, verbose_name='logs and log archival')),
                ('user_rights_management', models.CharField(max_length=140, verbose_name='user rights management')),
                ('security_solutions', models.CharField(max_length=140, verbose_name='security solutions')),
                ('product_owner', models.CharField(max_length=140, verbose_name='product owner')),
                ('application_holder', models.CharField(max_length=140, verbose_name='application holder')),
                ('admin_users', models.CharField(max_length=140, verbose_name='application admin users')),
                ('liability_professional_users', models.CharField(max_length=140, verbose_name='liability and professional users')),
                ('holder_extra_info', models.CharField(max_length=140, verbose_name='application holder extra info')),
                ('provider_responsibility', models.CharField(max_length=140, verbose_name='provider responsibility')),
                ('additional_contacts', models.CharField(max_length=140, verbose_name='additional contacts')),
                ('known_issues', models.CharField(max_length=140, verbose_name='known issues')),
                ('fileUrl', models.FileField(blank=True, db_column='file_url', null=True, upload_to='application/')),
                ('application_dependency', models.ManyToManyField(blank=True, to='app.application', verbose_name='application dependency')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('contract_number', models.CharField(max_length=140, verbose_name='contract number')),
                ('contract_type', models.CharField(choices=[('maintenance', 'Maintenance'), ('support_admin', 'Support & Administration'), ('consultation', 'Consultation'), ('software', 'Software'), ('license', 'License')], default='maintenance', max_length=140, verbose_name='contract type')),
                ('provider_contact', models.CharField(max_length=140, verbose_name='provider contact')),
                ('invoices_per_year', models.IntegerField(verbose_name='invoices per year')),
                ('value_per_year', models.FloatField(max_length=10, verbose_name='value per year')),
                ('place_of_use', models.CharField(max_length=140, verbose_name='place of use')),
                ('valid_from_date', models.DateField(verbose_name='valid from date')),
                ('valid_until_date', models.DateField(verbose_name='valid until date')),
                ('contract_continuation', models.CharField(max_length=140, verbose_name='contract continuation')),
                ('contract_decisions', models.CharField(max_length=140, verbose_name='contract decisions')),
                ('contract_holder', models.CharField(max_length=140, verbose_name='contract holder')),
                ('fileUrl', models.FileField(blank=True, db_column='file_url', null=True, upload_to='contract/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customership',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('keyword_fi', models.CharField(max_length=400, verbose_name='keyword in finnish')),
                ('keyword_en', models.CharField(max_length=400, verbose_name='keyword in english')),
                ('keyword_sv', models.CharField(max_length=400, verbose_name='keyword in swedish')),
                ('keyword_se', models.CharField(max_length=400, verbose_name='keyword in northern sami')),
                ('deprecated', models.BooleanField(default=False)),
                ('ontology_type', models.CharField(choices=[('concept', 'OntologyConcept'), ('hierarchy', 'OntologyHierarchy')], default='concept', verbose_name='ontology type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeywordLabel',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('business_id', models.CharField(max_length=140, verbose_name='business ID')),
                ('provider_type', models.CharField(choices=[('framework', 'Framework Agreement'), ('inhouse', 'Inhouse')], default='framework', max_length=140, verbose_name='provider type')),
                ('full_address', models.CharField(max_length=140, verbose_name='full address')),
                ('switch_phone', models.CharField(max_length=20, verbose_name='switch phone number')),
                ('general_email', models.EmailField(max_length=140, verbose_name='general email address')),
                ('support_phone', models.CharField(max_length=20, verbose_name='support phone number')),
                ('support_email', models.EmailField(max_length=140, verbose_name='support email address')),
                ('additional_contact', models.CharField(max_length=140, verbose_name='additional contact info')),
                ('provider_user_contact', models.CharField(max_length=140, verbose_name='provider user contact')),
                ('extra_url', models.URLField(blank=True, max_length=140, verbose_name='provider extra url')),
                ('related_applications', models.ManyToManyField(blank=True, related_name='pro_applications', to='app.application', verbose_name='related applications')),
                ('related_contracts', models.ManyToManyField(blank=True, related_name='pro_contracts', to='app.contract', verbose_name='related contracts')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('service_status', models.CharField(choices=[('in_deployment', 'In Deployment'), ('in_use', 'In Use'), ('unused', 'Unused'), ('shutdown', 'Shutdown'), ('archived', 'Archived'), ('undefined', 'Waiting for Definition'), ('unreleased', 'Waiting for Release'), ('deleted', 'Deleted')], default='undefined', max_length=140, verbose_name='service status')),
                ('criticality', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('normal', 'Normal'), ('low', 'Low'), ('noclass', 'No Classification')], default='normal', max_length=140, verbose_name='service criticality')),
                ('service_level', models.CharField(max_length=140, verbose_name='service level')),
                ('service_type', models.CharField(choices=[('onpremises', 'OnPremises'), ('iaas', 'IaaS'), ('paas', 'PaaS'), ('caas', 'CaaS'), ('faas', 'FaaS'), ('saas', 'SaaS'), ('other', 'Other')], default='onpremises', max_length=140, verbose_name='service type')),
                ('validity_type', models.CharField(choices=[('ongoing', 'Ongoing'), ('temporary', 'Temporary')], default='ongoing', max_length=140, verbose_name='service validity time type')),
                ('limitations', models.CharField(max_length=140, verbose_name='service limitations')),
                ('product_owner', models.CharField(max_length=140, verbose_name='product owner')),
                ('service_holder', models.CharField(max_length=140, verbose_name='service holder')),
                ('provider_role', models.CharField(max_length=140, verbose_name='provider role')),
                ('provider_contact', models.CharField(max_length=140, verbose_name='provider contact information')),
                ('additional_contacts', models.CharField(max_length=140, verbose_name='additional contacts')),
                ('fileUrl', models.FileField(blank=True, db_column='file_url', null=True, upload_to='service/')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.contract', verbose_name='contract object')),
                ('customership', models.ManyToManyField(blank=True, related_name='ser_customerships', to='app.customership', verbose_name='customership or place of use')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ser_provider', to='app.provider', verbose_name='service provider')),
                ('related_services', models.ManyToManyField(blank=True, to='app.service', verbose_name='related services')),
                ('required_installations', models.ManyToManyField(blank=True, related_name='ser_applications', to='app.application', verbose_name='required application installations')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('server_role', models.CharField(max_length=140, verbose_name='server role')),
                ('place_of_use', models.CharField(max_length=140, verbose_name='server location or place of use')),
                ('product_owner', models.CharField(max_length=140, verbose_name='product owner')),
                ('server_model', models.CharField(max_length=140, verbose_name='server model')),
                ('backup_data', models.CharField(max_length=140, verbose_name='backup data')),
                ('backup_device', models.CharField(max_length=140, verbose_name='backup device')),
                ('public_ip_addresses', models.CharField(max_length=140, verbose_name='public ip addresses')),
                ('dns_names', models.CharField(max_length=140, verbose_name='dns names and ip addresses')),
                ('server_type', models.CharField(max_length=140, verbose_name='server type')),
                ('environment_type', models.CharField(max_length=140, verbose_name='environment type')),
                ('dedicated', models.CharField(max_length=140, verbose_name='dedicated server')),
                ('maintenance_window', models.CharField(max_length=140, verbose_name='maintenance window')),
                ('server_criticality', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('normal', 'Normal'), ('low', 'Low'), ('noclass', 'No Classification')], default='normal', max_length=140, verbose_name='server criticality')),
                ('security_level', models.CharField(max_length=140, verbose_name='server security level')),
                ('service_level', models.CharField(max_length=140, verbose_name='service level')),
                ('server_status', models.CharField(max_length=140, verbose_name='server status')),
                ('install_date', models.DateField(verbose_name='install date')),
                ('ip_address', models.CharField(max_length=140, verbose_name='server ip address')),
                ('updates', models.CharField(max_length=140, verbose_name='information on server updates')),
                ('verification_practices', models.CharField(max_length=140, verbose_name='verification practices and controls')),
                ('recovery_practices_convalescence', models.CharField(max_length=140, verbose_name='recovery practices and convalescence')),
                ('logging', models.CharField(max_length=140, verbose_name='server logging')),
                ('access_rights_management', models.CharField(max_length=140, verbose_name='access rights management')),
                ('security_solutions', models.CharField(max_length=140, verbose_name='security solutions')),
                ('external_rights', models.CharField(max_length=140, verbose_name='external rights access management')),
                ('domain_name', models.CharField(max_length=140, verbose_name='domain name')),
                ('sub_domain', models.CharField(max_length=140, verbose_name='sub domain')),
                ('ip_address_type', models.CharField(max_length=140, verbose_name='ip address type')),
                ('subnet_mask', models.CharField(max_length=140, verbose_name='subnet mask')),
                ('default_gateway', models.CharField(max_length=140, verbose_name='default gateway')),
                ('mac_address', models.CharField(max_length=140, verbose_name='mac address')),
                ('applications', models.ManyToManyField(blank=True, related_name='servers', to='app.application')),
                ('customership', models.ManyToManyField(blank=True, related_name='srv_customerships', to='app.customership', verbose_name='server customership')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='provider',
            name='related_services',
            field=models.ManyToManyField(blank=True, related_name='pro_services', to='app.service', verbose_name='related services'),
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('audits', models.CharField(max_length=140, verbose_name='license audits')),
                ('valid_from_date', models.DateField(verbose_name='valid from date')),
                ('valid_until_date', models.DateField(verbose_name='valid until date')),
                ('license_type', models.CharField(choices=[('ea', 'Microsoft EA'), ('ees', 'Microsoft EES'), ('sa', 'Microsoft SA'), ('sce', 'Microsoft SCE'), ('oracle', 'Oracle'), ('other', 'Other')], default='ea', max_length=140, verbose_name='license type')),
                ('fileUrl', models.FileField(blank=True, db_column='file_url', null=True, upload_to='license/')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.contract', verbose_name='contract object')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeywordSet',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('usage', models.CharField(choices=[('any', 'Any'), ('application', 'Application')], default='any', max_length=140, verbose_name='Intended keyword usage')),
                ('keywords', models.ManyToManyField(related_name='sets', to='app.keyword')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='keyword',
            name='alt_label',
            field=models.ManyToManyField(blank=True, related_name='keyword_labels', to='app.keywordlabel', verbose_name='keyword synonyms'),
        ),
        migrations.AddField(
            model_name='keyword',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='keyword-broader+', to='app.keyword', verbose_name='broader concepts'),
        ),
        migrations.AddField(
            model_name='keyword',
            name='narrower',
            field=models.ManyToManyField(blank=True, related_name='keyword-narrower+', to='app.keyword', verbose_name='narrower concepts'),
        ),
        migrations.AddField(
            model_name='keyword',
            name='replaced_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aliases', to='app.keyword', verbose_name='replaced by keyword'),
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('environment_type', models.CharField(choices=[('dev', 'Development'), ('test', 'Testing'), ('stage', 'Staging'), ('prod', 'Production')], default='dev', max_length=140, verbose_name='integration environment type')),
                ('server_platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.server', verbose_name='integration server platform')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Directory',
            fields=[
                ('base_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('base_token', models.CharField(max_length=16)),
                ('id_prefix', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('visibility', models.CharField(choices=[('hidden', 'Hidden'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=140, verbose_name='object visibility type')),
                ('applications', models.ManyToManyField(blank=True, related_name='directories', to='app.application')),
                ('servers', models.ManyToManyField(blank=True, related_name='directories', to='app.server')),
                ('services', models.ManyToManyField(blank=True, related_name='directories', to='app.service')),
            ],
            options={
                'verbose_name': 'Directory',
                'verbose_name_plural': 'Directories',
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='con_provider', to='app.provider', verbose_name='contract provider'),
        ),
        migrations.AddField(
            model_name='contract',
            name='related_applications',
            field=models.ManyToManyField(blank=True, related_name='con_applications', to='app.application', verbose_name='related applications'),
        ),
        migrations.AddField(
            model_name='application',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='app_contracts', to='app.contract', verbose_name='contract object'),
        ),
        migrations.AddField(
            model_name='application',
            name='customership',
            field=models.ManyToManyField(blank=True, related_name='app_customerships', to='app.customership', verbose_name='customership or place of use'),
        ),
        migrations.AddField(
            model_name='application',
            name='installed_server',
            field=models.ManyToManyField(blank=True, to='app.server', verbose_name='installed server'),
        ),
        migrations.AddField(
            model_name='application',
            name='integration',
            field=models.ManyToManyField(blank=True, to='app.integration', verbose_name='integrations'),
        ),
        migrations.AddField(
            model_name='application',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='app_keywords', to='app.keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='application',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='app_licenses', to='app.license', verbose_name='license object'),
        ),
        migrations.AddField(
            model_name='application',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='app_provider', to='app.provider', verbose_name='application provider'),
        ),
        migrations.AddField(
            model_name='application',
            name='service_dependency',
            field=models.ManyToManyField(blank=True, to='app.service', verbose_name='service dependency'),
        ),
    ]
